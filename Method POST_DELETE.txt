import requests

class Test_new_location():
    """Работа с новой локацией"""

    def test_create_new_location(self):

        """Создание новой локации"""
        base_url = 'https://rahulshettyacademy.com'
        key = '?key=qaclick123'      # Параметр для всех запросов

        """Создание новой локации"""
        post_resourse = '/maps/api/place/add/json' # Ресурс метода Post

        post_url = base_url + post_resourse + key
        print(post_url)

        json_for_create_new_location = {

            "location": {

            "lat": -38.383494,

            "lng": 33.427362

            }, "accuracy": 50,

            "name": "Frontline house",

            "phone_number": "(+91) 983 893 3937",

            "address": "29, side layout, cohen 09",

            "types": [

             "shoe park",

            "shop"

             ],

             "website": "http://google.com",

            "language": "French-IN"

        }

        """Создание цикла, который создаст 5 новых локаций, а также создаст файл и добавит в него эти же place_id """
        i = 1
        while i <= 5:
            result_post = requests.post(post_url, json=json_for_create_new_location)
            print(result_post.text)
            print('Статус код: ' + str(result_post.status_code))
            assert 200 == result_post.status_code
            print('Успешно! Создана новая локация!')
            check_post = result_post.json()
            check_info_post = check_post.get('status')
            print('Статус код: ' + check_info_post)
            assert check_info_post == 'OK'
            print("Статус ответа Верен")
            place_id = check_post.get('place_id')
            print('Place_id: ' + place_id)
            my_file = open("dz_post.txt", "a+")
            my_file.write(place_id + '\n')
            my_file.close()
            i = i + 1


        """Проверка создания новой локации"""

        """Создание цикла, который проверит существование 5 новых локаций (из текстового файла)"""

        my_file = open('dz_post.txt', 'r')
        get_resourse = '/maps/api/place/get/json'  # Ресурс метода get
        for place_id in my_file:
            get_url = base_url + get_resourse + key + '&place_id=' + place_id.rstrip()
            print(get_url)
            result_get = requests.get(get_url)
            print(result_get.text)
            print('Статус код: ' + str(result_get.status_code))
            assert 200 == result_get.status_code
            print('Успешно! Проверка создания новой локации прошла успешно!')
        my_file.close()

        """Удаление новой локации"""
        my_file = open('dz_post.txt')
        content = my_file.readlines()
        """Создание цикла, который удалит 2 и 4  локацию (из текстового файла)"""
        for place_id in content[1:5:2]:
            delete_resourse = '/maps/api/place/delete/json'  # Ресурс метода delete
            delete_url = base_url + delete_resourse + key
            print(delete_url)
            json_for_delete_new_location = {
                'place_id': place_id.rstrip()
             }
            result_delete = requests.delete(delete_url, json=json_for_delete_new_location)
            print(result_delete.text)
            assert 200 == result_delete.status_code
            print('Успешно! Удаление новой локации прошло успешно!')
            check_status = result_delete.json()
            check_status_info = check_status.get('status')
            print("Сообщение: " + check_status_info)
            assert check_status_info == 'OK'
            print('Сообщение верно')
        my_file.close()

        """Проверка удаления новой локации"""

        my_file = open('dz_post.txt')

        """Составление цикла который сделает отбор на сущ. и несущ. локации, а также добавит сущ. в новый файл"""
        for place_id in my_file:
            get_url = base_url + get_resourse + key + '&place_id=' + place_id.rstrip()
            result_get = requests.get(get_url)
            print(result_get.text)
            if result_get.status_code == 404:
                assert 404 == result_get.status_code
                print('Статус код(удаления локации) : ' + str(result_delete.status_code))
                print('Успешно! Проверка удаления новой локации прошло успешно!')
                check_msg = result_get.json()
                check_msg_info = check_msg.get('msg')
                print("Сообщение: " + check_msg_info)
                assert check_msg_info == "Get operation failed, looks like place_id  doesn't exists"
                print("Сообщение верно")
            elif result_get.status_code == 200:
                print('Статус код(существования локации): ' + str(result_get.status_code))
                assert 200 == result_get.status_code
                print('Успешно! Проверка существования локации прошла успешно')
                my_file_2 = open("dz_post_2.txt", "a+")
                my_file_2.write(place_id)
                my_file_2.close()
        my_file.close()

        print("Тестирование Test_new_location завершено успешно")


new_place = Test_new_location()
new_place.test_create_new_location()